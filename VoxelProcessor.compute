#pragma kernel CSMain

float3 position;
float deltaTime;
float time;
int voxelCount;
float3 goalPos;
float spectrum[256];

struct voxel
{
    int type;
    float3 position;
    float activity;
};

RWStructuredBuffer<voxel> _VoxelData;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Get the current voxel to process and process it
    int ID = id.x + (id.y * (voxelCount/2.0f));
    voxel currentVoxel = _VoxelData[ID];
    float IDd10 = ID*0.1f;
    int min = floor(IDd10);
    int max = floor(IDd10+1);
    float actv = currentVoxel.activity * 3;
    currentVoxel.position = lerp(currentVoxel.position,goalPos + float3(cos(ID) * actv,sin(ID) * actv,-currentVoxel.activity*1.3),30.0 * deltaTime);
    float voxelvalue = lerp(spectrum[min],spectrum[max],IDd10-min) * 100 * log(ID*10);
    int a = currentVoxel.activity > voxelvalue;
    currentVoxel.activity = a*lerp(currentVoxel.activity,voxelvalue, 10 * deltaTime) + (1-a)*voxelvalue;
    currentVoxel.type = ID % 10u;
    _VoxelData[ID] = currentVoxel;
}